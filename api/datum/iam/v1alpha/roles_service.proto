syntax = "proto3";

package datum.iam.v1alpha;

import "datum/api/annotations.proto";
import "datum/iam/v1alpha/roles_resources.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";

option go_package = "go.datumapis.com/os/genproto/iam/v1alpha;iampb";

// Manages Roles in the IAM system
//
// Roles are used to group permissions assigned to IAM subjects through IAM
// policies. Service providers can create a default set of roles offered by
// their services. Organization and Project admins can create custom roles that
// can be used to bind a custom set of permissions to their end users.
//
// Here's an example role
service Roles {
  // Create a new role in the system
  rpc CreateRole(CreateRoleRequest) returns (google.longrunning.Operation) {
    option (datum.api.required_permissions) = "iam.datumapis.com/roles.create";
    option (google.api.method_signature) = "parent,role,role_id";
    option (google.api.http) = {
      post: "/iam/v1alpha/{parent=services/*}/roles"
      body: "role"
    };
    option (google.longrunning.operation_info) = {
      response_type: "Role"
      metadata_type: "CreateRoleMetadata"
    };
  }

  // Retrieves a role by its name.
  //
  // This will always return the expected state of the role. The role's
  // status will always reflect the last observed status of the role.
  rpc GetRole(GetRoleRequest) returns (Role) {
    option (datum.api.required_permissions) = "iam.datumapis.com/roles.get";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {get: "/iam/v1alpha/{name=services/*/roles/*}"};
  }

  // Lists roles under a parent resource.
  //
  // Roles can be organized into Folders or set at the root of the
  // Organizatino's heirarchy.
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (datum.api.required_permissions) = "iam.datumapis.com/roles.list";
    option (google.api.method_signature) = "parent";
    option (google.api.http) = {get: "/iam/v1alpha/{parent=services/*}/roles"};
  }

  // Updates an existing Role
  rpc UpdateRole(UpdateRoleRequest) returns (google.longrunning.Operation) {
    option (datum.api.required_permissions) = "iam.datumapis.com/roles.update";
    option (google.api.method_signature) = "role,update_mask";
    option (google.api.http) = {
      patch: "/iam/v1alpha/{role.name=services/*/roles/*}"
      body: "role"
    };
    option (google.longrunning.operation_info) = {
      response_type: "Role"
      metadata_type: "UpdateRoleMetadata"
    };
  }

  // Delete a role from the platform.
  //
  // A role will not be deleted until all resources have been removed from
  // the role. Deleting a role will not immediately stop the billing for
  // any resources provisioned within the role. Billing for a resource
  // provisioned within a role will only stop once the resource has been
  // removed.
  //
  // Roles can be scheduled for deletion in the future but no guarantees are
  // provided on when the deletion will start after the requested deletion time
  // has passed.
  rpc DeleteRole(DeleteRoleRequest) returns (google.longrunning.Operation) {
    option (datum.api.required_permissions) = "iam.datumapis.com/roles.delete";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {delete: "/iam/v1alpha/{name=services/*/roles/*}"};
    option (google.longrunning.operation_info) = {
      response_type: "Role"
      metadata_type: "DeleteRoleMetadata"
    };
  }
}

// The request message for creating a role.
message CreateRoleRequest {
  // The resource name to use as the parent in the role's resource hierarchy.
  // A Role can have a Folder or an Organization as it's parent. Must be in
  // the format "organizations/{organization}" or "roles/{role}".
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "*"}
  ];

  // The role to create.
  Role role = 2 [(google.api.field_behavior) = REQUIRED];

  // Set the ID to use for the role. This will be used as the last section of
  // the role's resource name.
  string role_id = 3 [(google.api.field_behavior) = OPTIONAL];

  // When set to true, the request will be validated but the role will not be
  // created within the system. This is helpful to perform server-side
  // validation of resources and show validation errors to users prior to
  // allowing them to submit the creation request.
  bool validate_only = 4 [(google.api.field_behavior) = OPTIONAL];
}

// The metadata returned from the long running operations when creating a new
// role.
message CreateRoleMetadata {}

// The request message for getting a role.
message GetRoleRequest {
  // Required. The name of the role to retrieve.
  // Format: organizations/{organization}/roles/{role}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "iam.datumapis.com/Role"}
  ];
}

// The request message for listing roles.
message ListRolesRequest {
  // The parent location in the resource hierarchy that roles should be
  // listed from.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "*"}
  ];

  // Optional. The maximum number of roles to return. If unspecified, defaults to 50.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. A token identifying a page of results to return.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];

  // Optional. A filter to apply to the results.
  string filter = 4 [(google.api.field_behavior) = OPTIONAL];
}

// The response message for listing roles.
message ListRolesResponse {
  // The list of roles.
  repeated Role roles = 1;

  // A token to retrieve the next page of results.
  string next_page_token = 2;
}

// The request message for updating a role.
message UpdateRoleRequest {
  // Required. The role to update.
  Role role = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. The update mask applies to the resource.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];

  // Indicates the request to update the role should only be validated and
  // changes must not actually take effect on the resource. API consumers can
  // leverage this option to perform validation and present errors to users
  // before submitting a real update request.
  bool validate_only = 3 [(google.api.field_behavior) = OPTIONAL];

  // Set to true to indicate that a new Role should be created if the
  // provided role doesn't already exist.
  bool allow_missing = 4 [(google.api.field_behavior) = OPTIONAL];
}

// The metadata used by long running operations when updating a role.
message UpdateRoleMetadata {}

// The request message for deleting a role.
message DeleteRoleRequest {
  // Required. The name of the role to delete.
  // Format: organizations/{organization}/roles/{role}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "iam.datumapis.com/Role"}
  ];

  // Indicates the request to update the role should only be validated and
  // changes must not actually take effect on the resource. API consumers can
  // leverage this option to perform validation and present errors to users
  // before submitting a real update request.
  bool validate_only = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optionally provide the computed checksum value of the current resource to
  // ensure updates only take effect when the latest resource was provided by
  // the caller.
  string etag = 4 [(google.api.field_behavior) = OPTIONAL];

  // When set to true, the request will still succeed if the role does not
  // exist.
  bool allow_missing = 5 [(google.api.field_behavior) = OPTIONAL];
}

// The metadata used by long running operations when deleting a role.
message DeleteRoleMetadata {}
