syntax = "proto3";

package datum.iam.v1alpha;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

option go_package = "go.datumapis.com/os/genproto/iam/v1alpha;iampb";

// Defines a serivce that can be implemented by services for checking access to
// a resource on the platform.
service AccessCheck {
  // Check whether a subject has a permission on a resource.
  rpc CheckAccess(CheckAccessRequest) returns (CheckAccessResponse) {
    // option (datum.api.required_permissions) = "iam.datumapis.com/access.check";
    option (google.api.http) = {
      post: "/iam/v1alpha/{resource=**}:checkAccess"
      body: "*"
    };
  }
}

// The request payload used to check a subject's access to a resource.
//
// Example YAML request:
//
// ```
// name: resourcemanager.datumapis.com/projects/my-project
// subject: user:johndoe@amce.com
// permission: compute.datumapis.com/workloads.list
// context:
//   - parentRelationship:
//       childResource: resourcemanager.datumapis.com/projects/my-project
//       parentResource: resourcemanager.datumapis.com/organizations/acme.com
// ```
message CheckAccessRequest {
  // The fully qualified name of the resource that should be checked. This must
  // be in the format `{service_name}/{resouce_name}`, (e.g.
  // 'compute.datumapis.com/projects/my-project/workloads/my-workload')
  string resource = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "*"
  ];

  // The subject to check access for in the IAM system. This can be a user or
  // service account.
  string subject = 2 [(google.api.field_behavior) = OPTIONAL];

  // The fully qualified permission name to check against the provided resource
  // name. The fully qualified name must be in the format
  // `{service_name}/{resource_type}.{action}`. For example,
  // 'compute.datumapis.com/workloads.create`.
  string permission = 3 [(google.api.field_behavior) = REQUIRED];

  // Supports providing additional context during the access check process that
  // can influence whether the subject will be allowed access.
  //
  // It's very important to provide parent / child relationships when providing
  // context so that permissions can be inherited from policys set on parent
  // resources.
  repeated CheckContext context = 5 [(google.api.field_behavior) = REQUIRED];
}

// Additional context that can be set on an access check request.
message CheckContext {
  oneof contextType {
    // Supports defining a parent / child relationship between two resources.
    // This can be used to specify the full resource hierarchy tree for
    // permission inheritance during access evaluations.
    ParentRelationship parent_relationship = 1;
  }
}

// Defines a parent and child relationship between two resources so permissions
// can be inherited by child entities.
message ParentRelationship {
  // The fully qualified resource name of the parent resource in the
  // relationship. Must be in the format `{service_id}/{resource_name}`.
  //
  // e.g. `compute.datumapis.com/projects/my-project/workloads/my-workload`
  string parent_resource = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "*"
  ];

  // The fully qualified resource name of the child resource in the
  // relationship. Must be in the format `{service_id}/{resource_name}`.
  //
  // e.g. `compute.datumapis.com/projects/my-project/workloads/my-workload`
  string child_resource = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "*"
  ];
}

// The response message from checking a subject's access to a resource in the
// IAM system.
message CheckAccessResponse {
  // Indicates whether the subject's access is allowed.
  bool allowed = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}
